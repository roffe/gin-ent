// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/roffe/gin-ent/ent/predicate"
	"github.com/roffe/gin-ent/ent/todo"
	"github.com/roffe/gin-ent/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   todo.Table,
			Columns: todo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todo.FieldID,
			},
		},
		Type: "Todo",
		Fields: map[string]*sqlgraph.FieldSpec{
			todo.FieldCreatedAt: {Type: field.TypeTime, Column: todo.FieldCreatedAt},
			todo.FieldUpdatedAt: {Type: field.TypeTime, Column: todo.FieldUpdatedAt},
			todo.FieldText:      {Type: field.TypeString, Column: todo.FieldText},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt: {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt: {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldUsername:  {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldPassword:  {Type: field.TypeBytes, Column: user.FieldPassword},
		},
	}
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todo.OwnerTable,
			Columns: []string{todo.OwnerColumn},
			Bidi:    false,
		},
		"Todo",
		"User",
	)
	graph.MustAddE(
		"todos",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
		},
		"User",
		"Todo",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (tq *TodoQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TodoQuery builder.
func (tq *TodoQuery) Filter() *TodoFilter {
	return &TodoFilter{tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TodoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TodoMutation builder.
func (m *TodoMutation) Filter() *TodoFilter {
	return &TodoFilter{m}
}

// TodoFilter provides a generic filtering capability at runtime for TodoQuery.
type TodoFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *TodoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TodoFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(todo.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TodoFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(todo.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TodoFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(todo.FieldUpdatedAt))
}

// WhereText applies the entql string predicate on the text field.
func (f *TodoFilter) WhereText(p entql.StringP) {
	f.Where(p.Field(todo.FieldText))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *TodoFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *TodoFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WherePassword applies the entql []byte predicate on the password field.
func (f *UserFilter) WherePassword(p entql.BytesP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereHasTodos applies a predicate to check if query has an edge todos.
func (f *UserFilter) WhereHasTodos() {
	f.Where(entql.HasEdge("todos"))
}

// WhereHasTodosWith applies a predicate to check if query has an edge todos with a given conditions (other predicates).
func (f *UserFilter) WhereHasTodosWith(preds ...predicate.Todo) {
	f.Where(entql.HasEdgeWith("todos", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
